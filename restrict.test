#!/bin/bash
#global_vars
user_path=$(cat /etc/passwd | grep $user |awk -F: '{print $6}');
#functions
function man_page ()
  { # Begin man page
  cat<< EOF
  NAME
       restrictaccess by Clen
  SYNOPSYS
       acctpasswd [options] USERNAME
  DESCRIPTION
       This script was designed to automatically create and remove .htaccess
       and .htpasswd restrictions which are in place due to Abuse or Legal
       department tickets.
       This is done by creating new or appending to existing .htaccess and
       .htpasswd files in the users home directory.
  OPTIONS
       -a CPANEL_USERNAME
            Add restrictions to specified USERNAME
       -r CPANEL_USERNAME
            Remove restrictions from specified USERNAME
       -c CPANEL_USERNAME
            Check for restrictions in place for USERNAME
       -h
            Displays this man page.
  Exiting.


EOF
} # End man page


function usage()
{
echo "this is help section"
echo "the is is the second line int he help section"
echo " -h for this one"
echo "-a for something lese"
echo "-d for next one"
}

function pu ()
{
echo "1starg =" $user
echo "dotyou :" $display_help
}

function check_user()
{
#checking whether the user actually exists.
if [[ -f /var/cpanel/users/$user ]]; then 
	user_exist=$(cat /etc/passwd | grep $user);
	if [[ ! -z "$user_exist" ]]; then 
		echo "User : $user does not exist in this system."; exit 0;
else
	echo "$user is not a cpanel user."; exit 0;
}

function check_error()
{
##check existences of certain files and what needs to be present"
if [[ ! -f $user_path/.htpasswd ]];then
	echo "[+].htpasswd file present."
	echo "[+]Creating the .htpasswd file ."
	touch $user_path/.htpasswd;
	if [[ ! -f $user_path.htaccess ]]; then
		echo "[+].htaccess is not present."
		echo "[+]Creating the .htaccess fle in the path."
		touch $user_path/.htaccess;
	fi
fi
}

function check_immutable()
{
#this is to set/unset the restrictions on the account.
if [[ -f $user_file/.immut_lock ]];then 
	lock=1;
	chwd=$(lsattr $user_path.htpasswd | awk '{print $1}'| grep -o "ia");
	chcs=$(lsattr $user_path.htaccess | awk '{print $1}'| grep -o "ia");
		if [[ -z $chwd  && -z $chcs ]];then
			have_i_set=$(cat $user_path/.htpasswd | grep "ABUSE RESTRICTIONS")
			immut=1;
			if [[ -z $have_i_set ]]; then
				echo "[!!]Lock file exists, immutable flags set. Restrictions Active. Nothing to Do here."
				abuse=1;
			else
				echo "[!!]Lock file exists. immutable flags set. Restrictions NOT present."
				abuse=0;
			fi
		else
			echo "[!!]Lock file exists,  but issues with immutable flags. Manual intervention required."
			echo "[!!]More details :"
			echo "[*]Immutable flags on  htpasswd : $chwd"
			echo "[*]Immutable flags on  htpasswd : $chcs"
			immut=0;
		fi
else
	echo "[!!]NO lock file is present. Do not make any changes.  Manual Intervention Required."
	lock=0;
fi
}

function set_restrict()
{
if  [[  $abuse == "0" &&  $immut == "0" && $lock == "0"]]; then 
	htpasswd $user_path/.htpasswd $user
	#this part needs to be checked...
	printf "$htpu:$htpws::ABUSE RESTRICTIONS - TICKET $tid\n" >> /home/${user}/.htpasswd
	printf "%s\n" "######### ABUSE RESTRICTIONS ######### TICKET $tid" >> /home/${user}/.htaccess
  	printf "%s\n" "AuthType Basic" >> /home/${user}/.htaccess
  	printf "%s\n" "AuthName \"Restricted\"" >> /home/${user}/.htaccess
  	printf "%s\n" "AuthUserFile $user_path/.htpasswd" >> /home/${user}/.htaccess
  	printf "%s\n" "Require valid-user" >> /home/${user}/.htaccess
  	printf "%s\n" "######### ABUSE RESTRICTIONS ######### TICKET $tid" >> /home/${user}/.htaccess
  	chattr +ia /home/${user}/.htaccess
  	chattr +ia /home/${user}/.htpasswd
else
	echo "the condition has failed,  need to chech manually."
}

function remove_restrict()
{
if [[ $abuse == "1" &&  $immut == "1" && $lock == "1"]]; then
	chattr -ia /home/${user}/.htaccess
	chattr -ia /home/${user}/.htpasswd
	sed -i '/ABUSE RESTRICTIONS/,/ABUSE RESTRICTIONS/d' /home/${user}/.htaccess
	sed -i '/ABUSE RESTRICTIONS - TICKET /d' /home/${user}/.htpasswd
	echo "[+]Restrictions removed."
}

echo "number of parameters : "
echo $#

#echo "the second one is  $2"
#while test $# -gt 0;
while getopts ":h:a:*" opt;
do
	case $opt in
		h)
			man_page
			display_help=$OPTARG
			pu $display_help
			exit 0;
			;;

		a)
			restrict=1;
			if [[ $3 == "http" ]];then
				user=$2;
				service=$3;
				check_user
				check_error
				check_immutable
				set_restrict $user_path
			elif  [[ $3 == "exim" ]]; then
				user=$2;
                                service=$3;
                                check_user
			else [[ $3  == "ftp" ]]; then
				user=$2;
                                service=$3;
                                check_user
                                restrict_user
			fi
			;;
		r)
			if [[ $3 == "http" ]];then
				user=$2;
				service=$3;
				check_user
				check_error
				check_immutable
				remove _restrict $user_path
			elif [[ $3 == "exim" ]];then 
				user=$2;
				service =$3;
				

		*)
			echo "This is a catch -all scenario"
			echo "Your formatting was not correct"
			man_page
			usage
			;;
	esac
echo $display_help
done
#echo $display_help
